{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "clusterName": {
      "type": "string",
      "minLength": 3,
      "maxLength": 15,
      "metadata": {
        "description": "The name of the HPC cluster. It must be unique in the domain forest; It must contain between 3 and 15 characters with lowercase letters and numbers, and must start with a letter."
      }
    },
    "virtualNetworkName": {
      "type": "string",
      "metadata": {
        "description": "The existing virtual network in which all VMs of the HPC cluster will be created."
      }
    },
    "virtualNetworkResourceGroupName": {
      "type": "string",
      "metadata": {
        "description": "The resource group in which the existing virtual network was created."
      }
    },
    "subnetName": {
      "type": "string",
      "metadata": {
        "description": "The existing subnet in which all VMs of the HPC cluster will be created."
      }
    },
    "domainName": {
      "type": "string",
      "metadata": {
        "description": "The fully qualified domain name (FQDN) for the existing domain forest in which the HPC cluster will join, for example 'hpc.local'."
      }
    },
    "headNodeOS": {
      "type": "string",
      "defaultValue": "WindowsServer2016",
      "allowedValues": [
        "WindowsServer2012R2",
        "WindowsServer2016",
        "CustomImage"
      ],
      "metadata": {
        "description": "The operating system of the head node."
      }
    },
    "headNodeImageResourceId": {
      "type": "string",
      "defaultValue": "/subscriptions/xxx/resourceGroups/xxx/providers/Microsoft.Compute/images/xxx",
      "metadata": {
        "description": "Specify only when 'CustomImage' selected for headNodeOS. The resource Id of the head node image, it can be a managed VM image in your own subscription (/subscriptions/&lt;SubscriptionId&gt;/resourceGroups/&lt;ResourceGroupName&gt;/providers/Microsoft.Compute/images/&lt;ImageName&gt;) or a shared VM image from Azure Shared Image Gallery (/subscriptions/&lt;SubscriptionId&gt;/resourceGroups/&lt;ResourceGroupName&gt;/providers/Microsoft.Compute/galleries/&lt;GalleryName&gt;/images/&lt;ImageName&gt;/versions/&lt;ImageVersion&gt;)."
      }
    },
    "headNodeOsDiskType": {
      "type": "string",
      "defaultValue": "Premium_SSD",
      "allowedValues": [
        "Standard_HDD",
        "Standard_SSD",
        "Premium_SSD"
      ],
      "metadata": {
        "description": "The disk type of head node VM. Note that Premium_SSD only supports some VM sizes, see <a href='https://azure.microsoft.com/en-us/documentation/articles/virtual-machines-windows-sizes' target='_blank'>Azure VM Sizes</a>"
      }
    },
    "headNodeVMSize": {
      "type": "string",
      "defaultValue": "Standard_DS4_v2",
      "metadata": {
        "description": "The VM size of the head node, all available VM sizes in Azure can be found at <a href='https://azure.microsoft.com/en-us/documentation/articles/virtual-machines-windows-sizes' target='_blank'>Azure VM Sizes</a>. Note that some VM sizes in the list are only available in some particular locations. Please check the availability and the price of the VM sizes at https://azure.microsoft.com/pricing/details/virtual-machines/windows/ before deployment."
      }
    },
    "computeNodeImage": {
      "type": "string",
      "defaultValue": "CentOS_7.7",
      "allowedValues": [
        "CentOS_6.5",
        "CentOS_6.6",
        "CentOS_6.7",
        "CentOS_6.8",
        "CentOS_6.9",
        "CentOS_6.10",
        "CentOS_7.0",
        "CentOS_7.1",
        "CentOS_7.2",
        "CentOS_7.3",
        "CentOS_7.4",
        "CentOS_7.5",
        "CentOS_7.6",
        "CentOS_7.7",
        "CentOS_6.5_HPC",
        "CentOS_6.8_HPC",
        "CentOS_7.1_HPC",
        "CentOS_7.3_HPC",
        "CentOS_7.4_HPC",
        "CentOS_7.6_HPC",
        "CentOS_7.7_HPC",
        "RHEL_6.7",
        "RHEL_6.8",
        "RHEL_7.2",
        "RHEL_7.3",
        "RHEL_7.4",
        "RHEL_7.5",
        "RHEL_7.6",
        "RHEL_7.7",
        "SLES_12_SP3",
        "SLES_12_SP3_HPC",
        "SLES_12_SP3_HPC_Premium",
        "SLES_12_SP3_Premium",
        "Ubuntu_14.04",
        "Ubuntu_16.04",
        "Ubuntu_18.04",
        "CustomImage"
      ],
      "metadata": {
        "description": "The Linux VM image of the compute nodes"
      }
    },
    "computeNodeImageResourceId": {
      "type": "string",
      "defaultValue": "/subscriptions/xxx/resourceGroups/xxx/providers/Microsoft.Compute/images/xxx",
      "metadata": {
        "description": "Specify only when 'CustomImage' selected for computeNodeImage. The resource Id of the compute node image, it can be a managed VM image in your own subscription (/subscriptions/&lt;SubscriptionId&gt;/resourceGroups/&lt;ResourceGroupName&gt;/providers/Microsoft.Compute/images/&lt;ImageName&gt;) or a shared VM image from Azure Shared Image Gallery (/subscriptions/&lt;SubscriptionId&gt;/resourceGroups/&lt;ResourceGroupName&gt;/providers/Microsoft.Compute/galleries/&lt;GalleryName&gt;/images/&lt;ImageName&gt;/versions/&lt;ImageVersion&gt;)."
      }
    },
    "computeNodeNamePrefix": {
      "type": "string",
      "defaultValue": "IaaSLnxCN",
      "minLength": 1,
      "maxLength": 12,
      "metadata": {
        "description": "The name prefix of the compute nodes. It must be no more than 12 characters, begin with a letter, and contain only letters, numbers and hyphens. For example, if 'IaaSCN' is specified, the compute node names will be 'IaaSCN000', 'IaaSCN001', ..."
      }
    },
    "computeNodeNumber": {
      "type": "int",
      "defaultValue": 10,
      "minValue": 1,
      "maxValue": 500,
      "metadata": {
        "description": "The number of the compute nodes."
      }
    },
    "computeNodeOsDiskType": {
      "type": "string",
      "defaultValue": "Standard_HDD",
      "allowedValues": [
        "Standard_HDD",
        "Standard_SSD",
        "Premium_SSD"
      ],
      "metadata": {
        "description": "The disk type of compute node VM. Note that Premium_SSD only supports some VM sizes, see <a href='https://azure.microsoft.com/en-us/documentation/articles/virtual-machines-windows-sizes' target='_blank'>Azure VM Sizes</a>"
      }
    },
    "computeNodeVMSize": {
      "type": "string",
      "defaultValue": "Standard_D3_v2",
      "metadata": {
        "description": "The VM size of the compute nodes, all available VM sizes in Azure can be found at <a href='https://azure.microsoft.com/en-us/documentation/articles/virtual-machines-windows-sizes' target='_blank'>Azure VM Sizes</a>. Note that some VM sizes in the list are only available in some particular locations. Please check the availability and the price of the VM sizes at https://azure.microsoft.com/pricing/details/virtual-machines/windows/ before deployment."
      }
    },
    "availabilitySetOption": {
      "type": "string",
      "defaultValue": "Auto",
      "allowedValues": [
        "AllNodes",
        "ComputeNodes",
        "None",
        "Auto"
      ],
      "metadata": {
        "description": "Specify whether you want to create the HPC nodes in an Azure availability set. Select 'AllNodes' to create both head node(s) and compute nodes in an availability set; select 'ComputeNodes' to only create compute nodes in an availability set; select 'Auto' to only create RDMA capable nodes in availability set; select 'None' not to create an availability set."
      }
    },
    "adminUsername": {
      "type": "string",
      "defaultValue": "hpcadmin",
      "metadata": {
        "description": "Administrator user name for the virtual machines and the Active Directory domain."
      }
    },
    "adminPassword": {
      "type": "securestring",
      "metadata": {
        "description": "Administrator password for the virtual machines and the Active Directory domain. Password must meet complexity requirements, see https://docs.microsoft.com/en-us/windows/security/threat-protection/security-policy-settings/password-must-meet-complexity-requirements"
      }
    },
    "vaultName": {
      "type": "string",
      "metadata": {
        "description": "Name of the KeyVault in which the certificate is stored."
      }
    },
    "vaultResourceGroup": {
      "type": "string",
      "metadata": {
        "description": "Resource Group of the KeyVault in which the certificate is stored."
      }
    },
    "certificateUrl": {
      "type": "string",
      "metadata": {
        "description": "Url of the certificate with version in KeyVault e.g. https://testault.vault.azure.net/secrets/testcert/b621es1db241e56a72d037479xab1r7."
      }
    },
    "certThumbprint": {
      "type": "string",
      "metadata": {
        "description": "Thumbprint of the certificate."
      }
    },
    "createPublicIPAddressForHeadNode": {
      "type": "string",
      "defaultValue": "Yes",
      "allowedValues": [
        "Yes",
        "No"
      ],
      "metadata": {
        "description": "Indicates whether to create a public IP address for head node."
      }
    },
    "enableAcceleratedNetworking": {
      "type": "string",
      "defaultValue": "No",
      "allowedValues": [
        "Yes",
        "No"
      ],
      "metadata": {
        "description": "Specify whether to create the Azure VMs with accelerated networking or not. Note accelerated networking is supported only for some VM sizes and Linux distributions. If you specify it as 'Yes', you must specify accelerated networking supported VM sizes and operating systems for all the VMs in the cluster. More information about accelerated networking please see https://docs.microsoft.com/en-us/azure/virtual-network/create-vm-accelerated-networking-powershell."
      }
    },
    "headNodeDataDiskCount": {
      "type": "int",
      "defaultValue": 0,
      "allowedValues": [
        0,
        1,
        2,
        4,
        8
      ],
      "metadata": {
        "description": "The number of data disks attached to the head node VM."
      }
    },
    "headNodeDataDiskSize": {
      "type": "int",
      "defaultValue": 128,
      "allowedValues": [
        32,
        64,
        128,
        256,
        512,
        1024,
        2048,
        4096
      ],
      "metadata": {
        "description": "The size in GB of each data disk that is attached to the head node VM."
      }
    },
    "headNodeDataDiskType": {
      "type": "string",
      "defaultValue": "Standard_HDD",
      "allowedValues": [
        "Standard_HDD",
        "Standard_SSD",
        "Premium_SSD"
      ],
      "metadata": {
        "description": "Head node data disk type. Note that Premium_SSD only supports some VM sizes, see <a href='https://azure.microsoft.com/en-us/documentation/articles/virtual-machines-windows-sizes' target='_blank'>Azure VM Sizes</a>"
      }
    },
    "computeNodeDataDiskCount": {
      "type": "int",
      "defaultValue": 0,
      "allowedValues": [
        0,
        1,
        2,
        4,
        8
      ],
      "metadata": {
        "description": "The number of data disks attached to the compute node VM."
      }
    },
    "computeNodeDataDiskSize": {
      "type": "int",
      "defaultValue": 128,
      "allowedValues": [
        32,
        64,
        128,
        256,
        512,
        1024,
        2048,
        4096
      ],
      "metadata": {
        "description": "The size in GB of each data disk that is attached to the compute node VM."
      }
    },
    "computeNodeDataDiskType": {
      "type": "string",
      "defaultValue": "Standard_HDD",
      "allowedValues": [
        "Standard_HDD",
        "Standard_SSD",
        "Premium_SSD"
      ],
      "metadata": {
        "description": "Compute node data disk type. Note that Premium_SSD only supports some VM sizes, see <a href='https://azure.microsoft.com/documentation/articles/virtual-machines-windows-sizes' target='_blank'>Azure VM Sizes</a>"
      }
    },
    "useSpotInstanceForComputeNodes": {
      "type": "string",
      "defaultValue": "No",
      "allowedValues": [
        "Yes",
        "No"
      ],
      "metadata": {
        "description": "Specify whether you want to use the experimental feature to create compute nodes as <a href='https://azure.microsoft.com/pricing/spot/' target='_blank'>Azure Spot instances</a>. Note that it is not recommended to use this feature in production cluster."
      }
    }
  },
  "variables": {
    "clusterName": "[trim(parameters('clusterName'))]",
    "virtualNetworkName": "[trim(parameters('virtualNetworkName'))]",
    "virtualNetworkResourceGroupName": "[trim(parameters('virtualNetworkResourceGroupName'))]",
    "subnetName": "[trim(parameters('subnetName'))]",
    "domainName": "[trim(parameters('domainName'))]",
    "vaultName": "[trim(parameters('vaultName'))]",
    "vaultResourceGroup": "[trim(parameters('vaultResourceGroup'))]",
    "certThumbprint": "[trim(parameters('certThumbprint'))]",
    "computeNodeNamePrefix": "[trim(parameters('computeNodeNamePrefix'))]",
    "emptyArray": [],
    "diskTypes": {
      "Standard_HDD": "Standard_LRS",
      "Standard_SSD": "StandardSSD_LRS",
      "Premium_SSD": "Premium_LRS"
    },
    "headNodeDataDisks": {
      "copy": [
        {
          "name": "hnDataDisks",
          "count": "[if(equals(parameters('headNodeDataDiskCount'), 0), 1, parameters('headNodeDataDiskCount'))]",
          "input": {
            "lun": "[copyIndex('hnDataDisks')]",
            "createOption": "Empty",
            "diskSizeGB": "[parameters('headNodeDataDiskSize')]",
            "managedDisk": {
              "storageAccountType": "[variables('diskTypes')[parameters('headNodeDataDiskType')]]"
            }
          }
        }
      ]
    },
    "storageAccountName": "[concat('hpc', uniqueString(resourceGroup().id, variables('clusterName')))]",
    "storageAccountId": "[resourceId('Microsoft.Storage/storageAccounts',variables('storageAccountName'))]",
    "vnetID": "[resourceId(variables('virtualNetworkResourceGroupName'), 'Microsoft.Network/virtualNetworks', variables('virtualNetworkName'))]",
    "subnetRef": "[concat(variables('vnetID'),'/subnets/', variables('subnetName'))]",
    "privateClusterFQDN": "[concat(toLower(variables('clusterName')), '.', variables('domainName'))]",
    "publicIPName": "[concat(variables('clusterName'),'publicip')]",
    "publicIPDNSNameLabel": "[concat(toLower(variables('clusterName')), uniqueString(resourceGroup().id))]",
    "publicIPAddressType": "Dynamic",
    "publicIpAddressId": {
      "id": "[resourceId('Microsoft.Network/publicIPAddresses', variables('publicIPName'))]"
    },
    "availabilitySetName": "[concat(variables('clusterName'), '-avset')]",
    "availabilitySet": {
      "id": "[resourceId('Microsoft.Compute/availabilitySets', variables('availabilitySetName'))]"
    },
    "uniqueSuffix": "[uniqueString(variables('subnetRef'))]",
    "uniqueNicSuffix": "[concat('-nic-', variables('uniqueSuffix'))]",
    "nicNameHN": "[concat(variables('clusterName'), variables('uniqueNicSuffix'))]",
    "nsgName": "[concat('hpcnsg-',uniquestring(resourceGroup().id, variables('subnetRef')))]",
    "networkSecurityGroupId": {
      "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('nsgName'))]"
    },
    "rdmaASeries": [
      "Standard_A8",
      "Standard_A9"
    ],
    "cnRDMACapable": "[or(contains(variables('rdmaASeries'), parameters('computeNodeVMSize')), contains(toLower(split(parameters('computeNodeVMSize'), '_')[1]), 'r'))]",
    "hnRDMACapable": "[or(contains(variables('rdmaASeries'), parameters('headNodeVMSize')), contains(toLower(split(parameters('headNodeVMSize'), '_')[1]), 'r'))]",
    "createHNInAVSet": "[or(equals(parameters('availabilitySetOption'), 'AllNodes'), and(equals(parameters('availabilitySetOption'), 'Auto'), variables('hnRDMACapable')))]",
    "createCNInAVSet": "[or(or(equals(parameters('availabilitySetOption'), 'AllNodes'), equals(parameters('availabilitySetOption'), 'ComputeNodes')), and(equals(parameters('availabilitySetOption'), 'Auto'), variables('cnRDMACapable')))]",
    "vmPriority": "[if(equals(parameters('useSpotInstanceForComputeNodes'), 'Yes'), 'Spot', 'Regular')]",
    "winCertSecrets": [
      {
        "sourceVault": {
          "id": "[resourceId(variables('vaultResourceGroup'), 'Microsoft.KeyVault/vaults', variables('vaultName'))]"
        },
        "vaultCertificates": [
          {
            "certificateUrl": "[parameters('certificateUrl')]",
            "certificateStore": "My"
          }
        ]
      }
    ],
    "lnxCertSecrets": [
      {
        "sourceVault": {
          "id": "[resourceId(variables('vaultResourceGroup'), 'Microsoft.KeyVault/vaults', variables('vaultName'))]"
        },
        "vaultCertificates": [
          {
            "certificateUrl": "[parameters('certificateUrl')]"
          }
        ]
      }
    ],
    "headNodeImages": {
      "WindowsServer2012R2": {
        "publisher": "MicrosoftWindowsServerHPCPack",
        "offer": "WindowsServerHPCPack",
        "sku": "2016u3hn-ws2012r2",
        "version": "latest"
      },
      "WindowsServer2016": {
        "publisher": "MicrosoftWindowsServerHPCPack",
        "offer": "WindowsServerHPCPack",
        "sku": "2016u3hn-ws2016",
        "version": "latest"
      },
      "CustomImage": {
        "id": "[trim(parameters('headNodeImageResourceId'))]"
      }
    },
    "computeNodeImages": {
      "CentOS_6.5": {
        "publisher": "OpenLogic",
        "offer": "CentOS",
        "sku": "6.5",
        "version": "latest"
      },
      "CentOS_6.6": {
        "publisher": "OpenLogic",
        "offer": "CentOS",
        "sku": "6.6",
        "version": "latest"
      },
      "CentOS_6.7": {
        "publisher": "OpenLogic",
        "offer": "CentOS",
        "sku": "6.7",
        "version": "latest"
      },
      "CentOS_6.8": {
        "publisher": "OpenLogic",
        "offer": "CentOS",
        "sku": "6.8",
        "version": "latest"
      },
      "CentOS_6.9": {
        "publisher": "OpenLogic",
        "offer": "CentOS",
        "sku": "6.9",
        "version": "latest"
      },
      "CentOS_6.10": {
        "publisher": "OpenLogic",
        "offer": "CentOS",
        "sku": "6.10",
        "version": "latest"
      },
      "CentOS_7.0": {
        "publisher": "OpenLogic",
        "offer": "CentOS",
        "sku": "7.0",
        "version": "latest"
      },
      "CentOS_7.1": {
        "publisher": "OpenLogic",
        "offer": "CentOS",
        "sku": "7.1",
        "version": "latest"
      },
      "CentOS_7.2": {
        "publisher": "OpenLogic",
        "offer": "CentOS",
        "sku": "7.2",
        "version": "latest"
      },
      "CentOS_7.3": {
        "publisher": "OpenLogic",
        "offer": "CentOS",
        "sku": "7.3",
        "version": "latest"
      },
      "CentOS_7.4": {
        "publisher": "OpenLogic",
        "offer": "CentOS",
        "sku": "7.4",
        "version": "latest"
      },
      "CentOS_7.5": {
        "publisher": "OpenLogic",
        "offer": "CentOS",
        "sku": "7.5",
        "version": "latest"
      },
      "CentOS_7.6": {
        "publisher": "OpenLogic",
        "offer": "CentOS",
        "sku": "7.6",
        "version": "latest"
      },
      "CentOS_7.7": {
        "publisher": "OpenLogic",
        "offer": "CentOS",
        "sku": "7.7",
        "version": "latest"
      },
      "CentOS_6.5_HPC": {
        "publisher": "OpenLogic",
        "offer": "CentOS-HPC",
        "sku": "6.5",
        "version": "latest"
      },
      "CentOS_6.8_HPC": {
        "publisher": "OpenLogic",
        "offer": "CentOS-HPC",
        "sku": "6.8",
        "version": "latest"
      },
      "CentOS_7.1_HPC": {
        "publisher": "OpenLogic",
        "offer": "CentOS-HPC",
        "sku": "7.1",
        "version": "latest"
      },
      "CentOS_7.3_HPC": {
        "publisher": "OpenLogic",
        "offer": "CentOS-HPC",
        "sku": "7.3",
        "version": "latest"
      },
      "CentOS_7.4_HPC": {
        "publisher": "OpenLogic",
        "offer": "CentOS-HPC",
        "sku": "7.4",
        "version": "latest"
      },
      "CentOS_7.6_HPC": {
        "publisher": "OpenLogic",
        "offer": "CentOS-HPC",
        "sku": "7.6",
        "version": "latest"
      },
      "CentOS_7.7_HPC": {
        "publisher": "OpenLogic",
        "offer": "CentOS-HPC",
        "sku": "7.7",
        "version": "latest"
      },
      "RHEL_6.7": {
        "publisher": "RedHat",
        "offer": "RHEL",
        "sku": "6.7",
        "version": "latest"
      },
      "RHEL_6.8": {
        "publisher": "RedHat",
        "offer": "RHEL",
        "sku": "6.8",
        "version": "latest"
      },
      "RHEL_7.2": {
        "publisher": "RedHat",
        "offer": "RHEL",
        "sku": "7.2",
        "version": "latest"
      },
      "RHEL_7.3": {
        "publisher": "RedHat",
        "offer": "RHEL",
        "sku": "7.3",
        "version": "latest"
      },
      "RHEL_7.4": {
        "publisher": "RedHat",
        "offer": "RHEL",
        "sku": "7.4",
        "version": "latest"
      },
      "RHEL_7.5": {
        "publisher": "RedHat",
        "offer": "RHEL",
        "sku": "7.5",
        "version": "latest"
      },
      "RHEL_7.6": {
        "publisher": "RedHat",
        "offer": "RHEL",
        "sku": "7.6",
        "version": "latest"
      },
      "RHEL_7.7": {
        "publisher": "RedHat",
        "offer": "RHEL",
        "sku": "7.7",
        "version": "latest"
      },
      "SLES_12_SP3": {
        "publisher": "SUSE",
        "offer": "SLES",
        "sku": "12-SP3",
        "version": "latest"
      },
      "SLES_12_SP3_HPC": {
        "publisher": "SUSE",
        "offer": "SLES-HPC",
        "sku": "12-SP3",
        "version": "latest"
      },
      "SLES_12_SP3_HPC_Premium": {
        "publisher": "SUSE",
        "offer": "SLES-HPC-Priority",
        "sku": "12-SP3",
        "version": "latest"
      },
      "SLES_12_SP3_Premium": {
        "publisher": "SUSE",
        "offer": "SLES-Priority",
        "sku": "12-SP3",
        "version": "latest"
      },
      "Ubuntu_14.04": {
        "publisher": "Canonical",
        "offer": "UbuntuServer",
        "sku": "14.04.5-LTS",
        "version": "latest"
      },
      "Ubuntu_16.04": {
        "publisher": "Canonical",
        "offer": "UbuntuServer",
        "sku": "16.04-LTS",
        "version": "latest"
      },
      "Ubuntu_18.04": {
        "publisher": "Canonical",
        "offer": "UbuntuServer",
        "sku": "18.04-LTS",
        "version": "latest"
      },
      "CustomImage": {
        "id": "[trim(parameters('computeNodeImageResourceId'))]"
      }
    },
    "headNodeImageRef": "[variables('headNodeImages')[parameters('headNodeOS')]]",
    "computeNodeImageRef": "[variables('computeNodeImages')[parameters('computeNodeImage')]]",
    "rdmaDriverSupportedCNImage": "[and(or(contains(parameters('computeNodeImage'), 'CentOS_7'), contains(parameters('computeNodeImage'), 'RHEL_7')), not(contains(parameters('computeNodeImage'), '_HPC')))]",
    "sharedResxBaseUrl": "https://raw.githubusercontent.com/Azure/hpcpack-template-2016/master/shared-resources"
  },
  "resources": [
    {
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[variables('storageAccountName')]",
      "apiVersion": "2019-04-01",
      "location": "[resourceGroup().location]",
      "sku": {
        "name": "Standard_LRS"
      },
      "kind": "Storage",
      "properties": {}
    },
    {
      "condition": "[equals(parameters('createPublicIPAddressForHeadNode'), 'Yes')]",
      "apiVersion": "2019-04-01",
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[variables('publicIPName')]",
      "location": "[resourceGroup().location]",
      "sku": {
        "name": "Basic"
      },
      "properties": {
        "publicIPAllocationMethod": "[variables('publicIPAddressType')]",
        "dnsSettings": {
          "domainNameLabel": "[variables('publicIPDNSNameLabel')]"
        }
      }
    },
    {
      "condition": "[equals(parameters('createPublicIPAddressForHeadNode'), 'Yes')]",
      "type": "Microsoft.Network/networkSecurityGroups",
      "name": "[variables('nsgName')]",
      "apiVersion": "2019-04-01",
      "location": "[resourceGroup().location]",
      "properties": {
        "securityRules": [
          {
            "name": "allow-HTTPS",
            "properties": {
              "description": "Allow Https",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "443",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 1000,
              "direction": "Inbound"
            }
          },
          {
            "name": "allow-RDP",
            "properties": {
              "description": "Allow RDP",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "3389",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 1010,
              "direction": "Inbound"
            }
          },
          {
            "name": "allow-HPCSession",
            "properties": {
              "description": "Allow HPC Session service",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "9090",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 1020,
              "direction": "Inbound"
            }
          },
          {
            "name": "allow-HPCBroker",
            "properties": {
              "description": "Allow HPC Broker service",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "9087",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 1030,
              "direction": "Inbound"
            }
          },
          {
            "name": "allow-HPCBrokerWorker",
            "properties": {
              "description": "Allow HPC Broker worker",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "9091",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 1040,
              "direction": "Inbound"
            }
          },
          {
            "name": "allow-HPCDataService",
            "properties": {
              "description": "Allow HPC Data service",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "9094 ",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 1050,
              "direction": "Inbound"
            }
          }
        ]
      }
    },
    {
      "apiVersion": "2019-04-01",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[variables('nicNameHN')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Network/networkSecurityGroups/', variables('nsgName'))]",
        "[concat('Microsoft.Network/publicIPAddresses/', variables('publicIPName'))]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "IPConfig",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "publicIPAddress": "[if(equals(parameters('createPublicIPAddressForHeadNode'), 'Yes'), variables('publicIpAddressId') , json('null'))]",
              "subnet": {
                "id": "[variables('subnetRef')]"
              }
            }
          }
        ],
        "networkSecurityGroup": "[if(equals(parameters('createPublicIPAddressForHeadNode'), 'Yes'), variables('networkSecurityGroupId') , json('null'))]",
        "enableAcceleratedNetworking": "[equals(parameters('enableAcceleratedNetworking'), 'Yes')]"
      }
    },
    {
      "condition": "[or(variables('createHNInAVSet'), variables('createCNInAVSet'))]",
      "type": "Microsoft.Compute/availabilitySets",
      "name": "[variables('availabilitySetName')]",
      "apiVersion": "2019-03-01",
      "location": "[resourceGroup().location]",
      "sku": {
        "name": "Aligned"
      },
      "properties": {
        "platformUpdateDomainCount": 5,
        "platformFaultDomainCount": 2
      }
    },
    {
      "apiVersion": "2019-03-01",
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[variables('clusterName')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Network/networkInterfaces/', variables('nicNameHN'))]",
        "[concat('Microsoft.Compute/availabilitySets/', variables('availabilitySetName'))]"
      ],
      "properties": {
        "availabilitySet": "[if(variables('createHNInAVSet'), variables('availabilitySet'), json('null'))]",
        "hardwareProfile": {
          "vmSize": "[parameters('headNodeVMSize')]"
        },
        "osProfile": {
          "computerName": "[variables('clusterName')]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPassword')]",
          "windowsConfiguration": {
            "enableAutomaticUpdates": false
          },
          "secrets": "[variables('winCertSecrets')]"
        },
        "storageProfile": {
          "imageReference": "[variables('headNodeImageRef')]",
          "osDisk": {
            "name": "[concat(variables('clusterName'), '-osdisk')]",
            "caching": "ReadOnly",
            "createOption": "FromImage",
            "managedDisk": {
              "storageAccountType": "[variables('diskTypes')[parameters('headNodeOsDiskType')]]"
            }
          },
          "dataDisks": "[if(equals(parameters('headNodeDataDiskCount'), 0), variables('emptyArray'), variables('headNodeDataDisks').hnDataDisks)]"
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', concat(variables('clusterName'), variables('uniqueNicSuffix')))]"
            }
          ]
        }
      }
    },
    {
      "condition": "[and(variables('createHNInAVSet'), variables('hnRDMACapable'))]",
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "name": "[concat(variables('clusterName'),'/installInfiniBandDriver')]",
      "apiVersion": "2019-03-01",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Compute/virtualMachines/', variables('clusterName'))]"
      ],
      "properties": {
        "publisher": "Microsoft.HpcCompute",
        "type": "InfiniBandDriverWindows",
        "typeHandlerVersion": "1.2",
        "autoUpgradeMinorVersion": true
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "name": "[concat(variables('clusterName'), '/JoinADDomain')]",
      "apiVersion": "2019-03-01",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Compute/virtualMachines/', variables('clusterName'))]",
        "[concat('Microsoft.Compute/virtualMachines/', variables('clusterName'), '/extensions/installInfiniBandDriver')]"
      ],
      "properties": {
        "publisher": "Microsoft.Compute",
        "type": "JsonADDomainExtension",
        "typeHandlerVersion": "1.3",
        "autoUpgradeMinorVersion": true,
        "settings": {
          "Name": "[variables('domainName')]",
          "User": "[concat(variables('domainName'), '\\', parameters('adminUsername'))]",
          "NumberOfRetries": "50",
          "RetryIntervalInMilliseconds": "10000",
          "Restart": "true",
          "Options": "3"
        },
        "protectedSettings": {
          "Password": "[parameters('adminPassword')]"
        }
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "name": "[concat(variables('clusterName'),'/setupHpcHeadNode')]",
      "apiVersion": "2019-03-01",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Compute/virtualMachines/', variables('clusterName'), '/extensions/JoinADDomain')]",
        "[concat('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))]"
      ],
      "properties": {
        "publisher": "Microsoft.Powershell",
        "type": "DSC",
        "typeHandlerVersion": "2.80",
        "autoUpgradeMinorVersion": true,
        "settings": {
          "configuration": {
            "url": "[concat(variables('sharedResxBaseUrl'),'/InstallHpcSingleHeadNode.ps1.zip')]",
            "script": "InstallHpcSingleHeadNode.ps1",
            "function": "InstallHpcSingleHeadNode"
          },
          "configurationArguments": {
            "SSLThumbprint": "[variables('certThumbprint')]",
            "CNSize": "[parameters('computeNodeVMSize')]",
            "SubscriptionId": "[subscription().subscriptionId]",
            "VNet": "[variables('virtualNetworkName')]",
            "Subnet": "[variables('subnetName')]",
            "Location": "[resourceGroup().location]",
            "ResourceGroup": "[variables('virtualNetworkResourceGroupName')]",
            "VaultResourceGroup": "[variables('vaultResourceGroup')]",
            "CertificateUrl": "[parameters('CertificateUrl')]",
            "CNNamePrefix": "[variables('computeNodeNamePrefix')]"
          }
        },
        "protectedSettings": {
          "configurationArguments": {
            "SetupUserCredential": {
              "UserName": "[concat(variables('domainName'), '\\', parameters('adminUsername'))]",
              "Password": "[parameters('adminPassword')]"
            },
            "AzureStorageConnString": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('storageAccountName'), ';AccountKey=', listKeys(variables('storageAccountId'), '2019-04-01').keys[0].value)]"
          }
        }
      }
    },
    {
      "apiVersion": "2019-05-01",
      "type": "Microsoft.Resources/deployments",
      "name": "[concat('create', variables('computeNodeNamePrefix'), padLeft(string(copyIndex()), 3, '0'))]",
      "dependsOn": [
        "[concat('Microsoft.Compute/availabilitySets/', variables('availabilitySetName'))]"
      ],
      "copy": {
        "name": "CN",
        "count": "[parameters('computeNodeNumber')]"
      },
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(variables('sharedResxBaseUrl'),'/computenode.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "subnetId": {
            "value": "[variables('subnetRef')]"
          },
          "vmName": {
            "value": "[concat(variables('computeNodeNamePrefix'), padLeft(string(copyIndex()), 3, '0'))]"
          },
          "vmSize": {
            "value": "[parameters('computeNodeVMSize')]"
          },
          "osDiskType": {
            "value": "[variables('diskTypes')[parameters('computeNodeOsDiskType')]]"
          },
          "dataDiskSizeInGB": {
            "value": "[parameters('computeNodeDataDiskSize')]"
          },
          "dataDiskCount": {
            "value": "[parameters('computeNodeDataDiskCount')]"
          },
          "dataDiskType": {
            "value": "[variables('diskTypes')[parameters('computeNodeDataDiskType')]]"
          },
          "imageReference": {
            "value": "[variables('computeNodeImageRef')]"
          },
          "imageOsPlatform": {
            "value": "linux"
          },
          "adminUsername": {
            "value": "[parameters('adminUsername')]"
          },
          "adminPassword": {
            "value": "[parameters('adminPassword')]"
          },
          "availabilitySetName": {
            "value": "[if(variables('createCNInAVSet'), variables('availabilitySetName'), '')]"
          },
          "vmPriority": {
            "value": "[variables('vmPriority')]"
          },
          "installRDMADriver": {
            "value": "[and(variables('createCNInAVSet'), variables('cnRDMACapable'), variables('rdmaDriverSupportedCNImage'))]"
          },
          "enableAcceleratedNetworking": {
            "value": "[equals(parameters('enableAcceleratedNetworking'), 'Yes')]"
          },
          "secrets": {
            "value": "[variables('lnxCertSecrets')]"
          },
          "certThumbprint": {
            "value": "[variables('certThumbprint')]"
          },
          "headNodeList": {
            "value": "[concat(variables('clusterName'), '.', variables('domainName'))]"
          },
          "joinDomain": {
            "value": false
          },
          "domainName": {
            "value": "[variables('domainName')]"
          }
        }
      }
    }
  ],
  "outputs": {
    "clusterDNSName": {
      "type": "string",
      "value": "[if(equals(parameters('createPublicIPAddressForHeadNode'), 'No'), variables('privateClusterFQDN'), reference(variables('publicIpAddressId').id, '2019-04-01').dnsSettings.fqdn)]"
    }
  }
}